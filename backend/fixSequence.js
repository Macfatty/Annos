require('dotenv').config();
const pool = require('./db'); // Anv√§nd samma pool som resten av applikationen

async function fixOrdersSequence() {
  const client = await pool.connect();
  
  try {
    console.log('üîß Synkroniserar orders sequence...');
    
    // H√§mta det h√∂gsta ID:t fr√•n orders-tabellen
    const maxIdResult = await client.query('SELECT MAX(id) as max_id FROM orders');
    const maxId = maxIdResult.rows[0].max_id || 0;
    
    console.log(`üìä H√∂gsta ID i orders-tabellen: ${maxId}`);
    
    // Uppdatera sequence till n√§sta tillg√§ngliga ID
    const nextId = maxId + 1;
    await client.query(`SELECT setval('orders_id_seq', $1, false)`, [nextId]);
    
    console.log(`‚úÖ Sequence uppdaterad till: ${nextId}`);
    
    // Verifiera att sequence fungerar
    const testResult = await client.query('SELECT nextval(\'orders_id_seq\') as next_id');
    console.log(`üß™ N√§sta ID som kommer genereras: ${testResult.rows[0].next_id}`);
    
    // √Öterst√§ll sequence till r√§tt v√§rde (eftersom vi testade)
    await client.query(`SELECT setval('orders_id_seq', $1, false)`, [nextId]);
    
    console.log('‚úÖ Sequence synkronisering slutf√∂rd!');
    
  } catch (error) {
    console.error('‚ùå Fel vid sequence synkronisering:', error);
    throw error;
  } finally {
    client.release();
  }
}

async function fixOrderItemsSequence() {
  const client = await pool.connect();
  
  try {
    console.log('üîß Synkroniserar order_items sequence...');
    
    // H√§mta det h√∂gsta ID:t fr√•n order_items-tabellen
    const maxIdResult = await client.query('SELECT MAX(id) as max_id FROM order_items');
    const maxId = maxIdResult.rows[0].max_id || 0;
    
    console.log(`üìä H√∂gsta ID i order_items-tabellen: ${maxId}`);
    
    // Uppdatera sequence till n√§sta tillg√§ngliga ID
    const nextId = maxId + 1;
    await client.query(`SELECT setval('order_items_id_seq', $1, false)`, [nextId]);
    
    console.log(`‚úÖ Order items sequence uppdaterad till: ${nextId}`);
    
  } catch (error) {
    console.error('‚ùå Fel vid order_items sequence synkronisering:', error);
    throw error;
  } finally {
    client.release();
  }
}

async function fixOrderItemOptionsSequence() {
  const client = await pool.connect();
  
  try {
    console.log('üîß Synkroniserar order_item_options sequence...');
    
    // H√§mta det h√∂gsta ID:t fr√•n order_item_options-tabellen
    const maxIdResult = await client.query('SELECT MAX(id) as max_id FROM order_item_options');
    const maxId = maxIdResult.rows[0].max_id || 0;
    
    console.log(`üìä H√∂gsta ID i order_item_options-tabellen: ${maxId}`);
    
    // Uppdatera sequence till n√§sta tillg√§ngliga ID
    const nextId = maxId + 1;
    await client.query(`SELECT setval('order_item_options_id_seq', $1, false)`, [nextId]);
    
    console.log(`‚úÖ Order item options sequence uppdaterad till: ${nextId}`);
    
  } catch (error) {
    console.error('‚ùå Fel vid order_item_options sequence synkronisering:', error);
    throw error;
  } finally {
    client.release();
  }
}

async function main() {
  try {
    console.log('üöÄ Startar sequence synkronisering...\n');
    
    await fixOrdersSequence();
    console.log('');
    
    await fixOrderItemsSequence();
    console.log('');
    
    await fixOrderItemOptionsSequence();
    console.log('');
    
    console.log('üéâ Alla sequences synkroniserade!');
    
  } catch (error) {
    console.error('üí• Fel vid sequence synkronisering:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// K√∂r scriptet om det anropas direkt
if (require.main === module) {
  main();
}

module.exports = {
  fixOrdersSequence,
  fixOrderItemsSequence,
  fixOrderItemOptionsSequence
};
