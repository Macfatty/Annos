diff --git a/README.md b/README.md
index 6b141b5fcd24b86650ea46b99297715bbeadd75a..f03c40f4e8e5e5c192202491eba16b3e29501043 100644
--- a/README.md
+++ b/README.md
@@ -29,50 +29,52 @@ git clone https://github.com/Macfatty/Annos.git
 cd Annos
 ```
 
 ### 2. Installera backend-beroenden
 ```bash
 cd backend
 npm install
 # Detta laddar ner bland annat Jest som dev-dependency
 # Kontrollera att du har express & cors
 npm list express
 npm list cors
 # Om nya autentiseringsmoduler lagts till (t.ex. `google-auth-library` och
 # `apple-signin-auth`), kör `npm install` igen efter att du hämtat uppdaterad
 # kod.
 ```
 
 ### 3. Skapa `.env`-fil
 Lägg till följande i `backend/.env`:
 ```
 JWT_SECRET=your-secret
 # Används för att signera refresh tokens
 REFRESH_SECRET=your-refresh-secret
 # OAuth-nycklar
 GOOGLE_CLIENT_ID=din-google-client-id
 APPLE_CLIENT_ID=din-apple-client-id
+# Adressen som får skicka cookies till backend
+FRONTEND_ORIGIN=http://localhost:5173
 # Valfritt: ange egen port
 PORT=3001
 ```
 
 ### 4. Skapa admin-konto
 Kör skriptet nedan för att skapa ett första administratörskonto. Standarduppgifterna är `admin@example.com` och `admin123`.
 ```bash
 node backend/skapaAdmin.js
 ```
 När både backend och frontend körs kan du navigera till `/admin` för att logga in med dessa uppgifter.
 
 ### 5. Starta backend-servern
 ```bash
 node server.js
 ```
 Öppna: http://localhost:3001
 
 ---
 
 ### 6. Installera frontend-beroenden
 ```bash
 cd ../frontend
 npm install
 # Detta installerar ESLint och @eslint/js samt andra dev-beroenden
 # Kör även `npm install` igen om du hämtar ny kod för att säkerställa att alla
diff --git a/backend/server.js b/backend/server.js
index c5eaf573a7d721e19c7f6f32d627a24abb494a53..643ed0e5395f162410ce26bae59fb5244dc7a713 100644
--- a/backend/server.js
+++ b/backend/server.js
@@ -1,50 +1,52 @@
 const express = require("express");
 const cors = require("cors");
 const bcrypt = require("bcrypt");
 const jwt = require("jsonwebtoken");
 const cookieParser = require("cookie-parser");
 const { verifyToken, verifyRole } = require("./authMiddleware");
 const { body, validationResult } = require("express-validator");
 const dotenv = require("dotenv");
 const authRouter = require("./routes/auth");
 
 dotenv.config();
 
 const app = express();
 const PORT = process.env.PORT || 3001;
 const meny = require("./Data/menuData.js");
 const tillbehor = require("./Data/tillbehorData.js");
 const {
   hamtaDagensOrdrar,
   hamtaSenasteOrder,
   markeraOrderSomKlar,
   db,
 } = require("./orderDB");
 
 
-app.use(cors());
+app.use(
+  cors({ origin: process.env.FRONTEND_ORIGIN, credentials: true })
+);
 app.use(express.json());
 app.use(cookieParser());
 app.use('/api/auth', authRouter);
 
 app.get("/", (req, res) => {
   res.send("backend funkar!");
 });
 
 // MENY OCH TILLBEHÖR
 app.get("/api/meny", (req, res) => {
   res.json(meny);
 });
 
 app.get("/api/tillbehor", (req, res) => {
   try {
     res.json(tillbehor);
   } catch (err) {
     console.error("Fel vid laddning av tillbehör:", err);
     res.status(500).json({ fel: "Kunde inte ladda tillbehör" });
   }
 });
 
 // SPARA ORDER + KUNDBESTÄLLNING
 app.post(
   "/api/order",
diff --git a/frontend/src/AdminPanel.jsx b/frontend/src/AdminPanel.jsx
index 4eaed3d329c4244ddbf959a8402dbf75dc20cdc7..c9e3192ad80625119c6518357bb3a44ab884e571 100644
--- a/frontend/src/AdminPanel.jsx
+++ b/frontend/src/AdminPanel.jsx
@@ -12,78 +12,80 @@ function AdminPanel() {
 
   const token = localStorage.getItem("token");
 
   // Kontrollera adminroll
   useEffect(() => {
     if (!token) {
       navigate("/");
       return;
     }
 
     try {
       const payload = JSON.parse(atob(token.split(".")[1]));
       if (payload.role !== "admin") {
         navigate("/");
       }
     } catch (err) {
       console.error("Ogiltig token:", err);
       navigate("/");
     }
   }, [navigate, token]);
 
   // Hämta ordrar
   const hamtaOrdrar = useCallback(async () => {
     setLoading(true);
     try {
-      const res = await fetch(`${BASE_URL}/api/admin/orders/today`, {
-        headers: { Authorization: `Bearer ${token}` },
-      });
+      const res = await fetch(`${BASE_URL}/api/admin/orders/today`, {
+        headers: { Authorization: `Bearer ${token}` },
+        credentials: "include",
+      });
       if (!res.ok) {
         throw new Error("Kunde inte hämta ordrar");
       }
       const data = await res.json();
       setOrdrar(data);
       setFel(null);
     } catch (err) {
       console.error(err);
       setFel("Fel vid hämtning av ordrar.");
     } finally {
       setLoading(false);
     }
   }, [token]);
 
   useEffect(() => {
     hamtaOrdrar();
   }, [hamtaOrdrar]);
 
   // Markera som klar
   const markeraSomKlar = async (id) => {
     try {
-      const res = await fetch(`${BASE_URL}/api/admin/orders/${id}/klart`, {
-        method: "PATCH",
-        headers: { Authorization: `Bearer ${token}` },
-      });
+      const res = await fetch(`${BASE_URL}/api/admin/orders/${id}/klart`, {
+        method: "PATCH",
+        headers: { Authorization: `Bearer ${token}` },
+        credentials: "include",
+      });
       if (!res.ok) {
         throw new Error("Kunde inte markera som klar");
       }
       setOrdrar((prev) => prev.filter((o) => o.id !== id));
     } catch (err) {
       console.error(err);
       alert("❌ Misslyckades att markera ordern som klar");
     }
   };
 
   const tema = localStorage.getItem("tema") === "dark";
 
   return (
     <div style={{ padding: "2rem", fontFamily: "sans-serif" }}>
       <h1>📋 Adminpanel – Dagens ordrar</h1>
       <button onClick={hamtaOrdrar} disabled={loading} style={{ marginBottom: "1rem" }}>
         🔄 Uppdatera
       </button>
 
       {loading && <p>Laddar...</p>}
       {fel && <p style={{ color: "red" }}>{fel}</p>}
 
       {ordrar.length === 0 && !loading ? (
         <p>Inga beställningar ännu.</p>
       ) : (
diff --git a/frontend/src/App.jsx b/frontend/src/App.jsx
index c98205210ba1853481414b493d135dd8d2ca4d37..a3f026693212f6856953302424002980a76a171f 100644
--- a/frontend/src/App.jsx
+++ b/frontend/src/App.jsx
@@ -50,70 +50,74 @@ function App() {
   const [tema, setTema] = useState(
     () => localStorage.getItem("tema") || "light"
   );
   const [restaurangSlug, setRestaurangSlug] = useState("campino");
 
   useEffect(() => {
     const query = new URLSearchParams(location.search);
     const slug = query.get("restaurang");
     if (slug) {
       setRestaurangSlug(slug);
     }
   }, [location.search]);
 
   useEffect(() => {
     document.body.className = tema;
     localStorage.setItem("tema", tema);
   }, [tema]);
 
   useEffect(() => {
     localStorage.setItem("varukorg", JSON.stringify(varukorg));
   }, [varukorg]);
 
   useEffect(() => {
     const fetchMeny = async () => {
       try {
-        const res = await fetch(`${BASE_URL}/api/meny`);
+        const res = await fetch(`${BASE_URL}/api/meny`, {
+          credentials: "include",
+        });
         if (!res.ok) {
           throw new Error("Något gick fel vid hämtning");
         }
         const data = await res.json();
         setMeny(data);
       } catch (err) {
         console.error("Fel:", err);
         setError("Kunde inte ladda menydata från servern.");
       } finally {
         setLoading(false);
       }
     };
     fetchMeny();
   }, []);
 
   useEffect(() => {
     const fetchTillbehor = async () => {
       try {
-        const res = await fetch(`${BASE_URL}/api/tillbehor`);
+        const res = await fetch(`${BASE_URL}/api/tillbehor`, {
+          credentials: "include",
+        });
         if (!res.ok) {
           throw new Error("Kunde inte ladda tillbehör");
         }
         const data = await res.json();
         setTillbehor(data);
       } catch (err) {
         console.error("Fel vid tillbehör:", err);
       }
     };
     fetchTillbehor();
   }, []);
 
   useEffect(() => {
     const observer = () => {
       const tok = localStorage.getItem("token");
       setInloggad(!!tok);
       if (!tok) {
         setRole("");
         return;
       }
       try {
         const payload = JSON.parse(atob(tok.split(".")[1]));
         setRole(payload.role || "");
       } catch {
         setRole("");
diff --git a/frontend/src/Checkout.jsx b/frontend/src/Checkout.jsx
index 8939a9a78cb322daa18362357755b4ea8c39a7f0..1baff9486e37890be0805779532bef51cb1f0032 100644
--- a/frontend/src/Checkout.jsx
+++ b/frontend/src/Checkout.jsx
@@ -43,50 +43,51 @@ function Checkout({ varukorg, setVarukorg, restaurang }) {
   const skickaBestallning = () => {
     const token = localStorage.getItem("token");
     if (!token) {
       alert("🔒 Du måste logga in för att kunna lägga en beställning.");
       navigate("/login");
       return;
     }
 
     const payload = {
       kund: {
         namn: kundinfo.namn,
         email: kundinfo.email,
         telefon: kundinfo.telefon,
         adress: kundinfo.adress,
         ovrigt: kundinfo.ovrigt, // ✅ OBS: viktigt att denna matchar servern
       },
       order: varukorg, // ✅ Skickar bara maträtter
     };
 
     fetch(`${BASE_URL}/api/order`, {
       method: "POST",
       headers: {
         "Content-Type": "application/json",
         Authorization: `Bearer ${token}`,
       },
+      credentials: "include",
       body: JSON.stringify(payload),
     })
       .then((res) => {
         if (!res.ok) {
           throw new Error("Misslyckades att skicka beställning");
         }
         return res.json();
       })
       .then((data) => {
         console.log("Beställning skickad:", data);
         localStorage.setItem("kundinfo", JSON.stringify(kundinfo));
         sessionStorage.setItem("tack", "1");
         setVarukorg([]);
         navigate(`/tack?restaurang=${restaurang}`);
       })
       .catch((err) => {
         console.error("Fel vid beställning:", err);
         alert("Kunde inte lägga beställningen. Försök igen.");
       });
   };
 
   return (
     <div className="checkout" style={{ padding: "2rem", maxWidth: "600px", margin: "auto" }}>
       <h2>🧾 Slutför beställning</h2>
       <form
diff --git a/frontend/src/KurirVy.jsx b/frontend/src/KurirVy.jsx
index cd0d80b6adde05c35e33adc2ac3f02a963ff03b2..447bfabad594c49a7afcf9b3e53f66559cacd16e 100644
--- a/frontend/src/KurirVy.jsx
+++ b/frontend/src/KurirVy.jsx
@@ -9,71 +9,73 @@ function KurirVy() {
   const [ordrar, setOrdrar] = useState([]);
   const [fel, setFel] = useState(null);
 
   const token = localStorage.getItem("token");
 
   useEffect(() => {
     if (!token) {
       navigate("/login");
       return;
     }
 
     try {
       const payload = JSON.parse(atob(token.split(".")[1]));
       if (payload.role !== "courier") {
         navigate("/");
       }
     } catch {
       navigate("/");
     }
   }, [navigate, token]);
 
   const hämtaOrdrar = useCallback(async () => {
     try {
       const res = await fetch(`${BASE_URL}/api/admin/orders/today`, {
         headers: { Authorization: `Bearer ${token}` },
+        credentials: "include",
       });
       if (!res.ok) {
         throw new Error("Kunde inte hämta ordrar");
       }
       const data = await res.json();
       setOrdrar(data);
     } catch (err) {
       console.error(err);
       setFel("Fel vid hämtning av leveranser.");
     }
   }, [token]);
 
   useEffect(() => {
     hämtaOrdrar();
   }, [hämtaOrdrar]);
 
   const markeraSomLevererad = async (id) => {
     try {
       const res = await fetch(`${BASE_URL}/api/admin/orders/${id}/klart`, {
         method: "PATCH",
         headers: { Authorization: `Bearer ${token}` },
+        credentials: "include",
       });
       if (!res.ok) {
         throw new Error("Kunde inte markera som klar");
       }
       setOrdrar((prev) => prev.filter((o) => o.id !== id));
     } catch (err) {
       console.error(err);
       alert("❌ Kunde inte markera som levererad.");
     }
   };
 
   return (
     <div style={{ padding: "2rem", fontFamily: "sans-serif" }}>
       <h1>🚚 Kurirpanel – Leveranser</h1>
       {fel && <p style={{ color: "red" }}>{fel}</p>}
       {ordrar.map((order) => (
         <div
           key={order.id}
           style={{
             border: "1px solid #ccc",
             marginBottom: "1.5rem",
             padding: "1rem",
             borderRadius: "10px",
             backgroundColor: "#f0f8ff",
           }}
diff --git a/frontend/src/Login.jsx b/frontend/src/Login.jsx
index fb7d6eca1116bd8832b669a2f8d2e29e0f5a1884..dab370c91f5475dd222fad8299ed286a09f1e019 100644
--- a/frontend/src/Login.jsx
+++ b/frontend/src/Login.jsx
@@ -1,95 +1,98 @@
 import { useState } from "react";
 import { useNavigate } from "react-router-dom";
 
 const BASE_URL = import.meta.env.VITE_API_BASE_URL;
 
 function Login() {
   const navigate = useNavigate();
   const [email, setEmail] = useState("");
   const [losenord, setLosenord] = useState("");
 
   const loggaIn = async () => {
     try {
       const res = await fetch(`${BASE_URL}/api/auth/login`, {
-        method: "POST",
-        headers: { "Content-Type": "application/json" },
-        body: JSON.stringify({ email, losenord }),
-      });
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        credentials: "include",
+        body: JSON.stringify({ email, losenord }),
+      });
 
       const data = await res.json();
 
       if (res.ok) {
         localStorage.setItem("token", data.token);
 
         // 🔐 Spara användarinfo för profil & checkout
         localStorage.setItem("kundinfo", JSON.stringify({
           namn: data.namn,
           email: data.email,
           telefon: data.telefon,
           adress: data.adress || ""
         }));
 
         window.dispatchEvent(new Event("storage"));
         navigate("/valj-restaurang");
       } else {
         alert("Fel inloggningsuppgifter");
       }
     } catch (err) {
       console.error(err);
       alert("Kunde inte logga in.");
     }
   };
 
   const loggaInMedGoogle = async () => {
     try {
       const res = await fetch(`${BASE_URL}/api/auth/google`, {
         method: "POST",
         headers: { "Content-Type": "application/json" },
+        credentials: "include",
         body: JSON.stringify({ token: window.googleToken || "" }),
       });
 
       const data = await res.json();
 
       if (res.ok) {
         localStorage.setItem("token", data.accessToken);
         window.dispatchEvent(new Event("storage"));
         navigate("/valj-restaurang");
       } else {
         alert("Kunde inte logga in med Google");
       }
     } catch (err) {
       console.error(err);
       alert("Kunde inte logga in med Google.");
     }
   };
 
   const loggaInMedApple = async () => {
     try {
       const res = await fetch(`${BASE_URL}/api/auth/apple`, {
         method: "POST",
         headers: { "Content-Type": "application/json" },
+        credentials: "include",
         body: JSON.stringify({ identityToken: window.appleToken || "" }),
       });
 
       const data = await res.json();
 
       if (res.ok) {
         localStorage.setItem("token", data.accessToken);
         window.dispatchEvent(new Event("storage"));
         navigate("/valj-restaurang");
       } else {
         alert("Kunde inte logga in med Apple");
       }
     } catch (err) {
       console.error(err);
       alert("Kunde inte logga in med Apple.");
     }
   };
 
   return (
     <div style={{ padding: "2rem", maxWidth: "600px", margin: "auto", textAlign: "center" }}>
       <h1>🔐 Logga in</h1>
       <label htmlFor="email">E-postadress</label>
       <input
         id="email"
         type="email"
diff --git a/frontend/src/MinProfil.jsx b/frontend/src/MinProfil.jsx
index 33cfa7731c29fd8369ca2fbe0fc779534212fa9f..d93f73041c1ac8ff5a4448b856db78b1ee7f491f 100644
--- a/frontend/src/MinProfil.jsx
+++ b/frontend/src/MinProfil.jsx
@@ -1,47 +1,48 @@
 import { useState, useEffect } from "react";
 import { useNavigate } from "react-router-dom";
 import MinaBeställningar from "./MinaBeställningar";
 
 const BASE_URL = import.meta.env.VITE_API_BASE_URL;
 
 function MinProfil() {
   const navigate = useNavigate();
   const [aktiv, setAktiv] = useState("info");
   const [profil, setProfil] = useState(null);
   const darkMode = document.body.classList.contains("dark");
 
   useEffect(() => {
     const token = localStorage.getItem("token");
     if (!token) {
       navigate("/login");
       return;
     }
 
-    fetch(`${BASE_URL}/api/profile`, {
-      headers: { Authorization: `Bearer ${token}` },
-    })
+    fetch(`${BASE_URL}/api/profile`, {
+      headers: { Authorization: `Bearer ${token}` },
+      credentials: "include",
+    })
       .then((res) => res.json())
       .then((data) => {
         setProfil(data);
         localStorage.setItem("kundinfo", JSON.stringify(data));
       })
       .catch((err) => {
         console.error(err);
         const fallback = localStorage.getItem("kundinfo");
         if (fallback) {
           setProfil(JSON.parse(fallback));
         } else {
           navigate("/login");
         }
       });
   }, [navigate]);
 
   const sektioner = [
     { id: "bestallningar", namn: "📦 Mina beställningar" },
     { id: "info", namn: "👤 Min information" },
     { id: "sakerhet", namn: "🔒 Säkerhet & lösenord" },
     { id: "exportera", namn: "📁 Exportera min data" },
     { id: "radera", namn: "❌ Radera konto" },
   ];
 
   const loggaUt = () => {
diff --git "a/frontend/src/MinaBest\303\244llningar.jsx" "b/frontend/src/MinaBest\303\244llningar.jsx"
index 2cded4883e9cca0e19926c6b4546e9fd2e110053..571aab1872437df0fe1754dd944093433aec09c2 100644
--- "a/frontend/src/MinaBest\303\244llningar.jsx"
+++ "b/frontend/src/MinaBest\303\244llningar.jsx"
@@ -1,47 +1,48 @@
 import { useEffect, useState } from "react";
 import "./App.css";
 
 const BASE_URL = import.meta.env.VITE_API_BASE_URL;
 
 function MinaBeställningar({ onBeställIgen }) {
   const [bestallningar, setBestallningar] = useState([]);
   const [fel, setFel] = useState(null);
   const [laddar, setLaddar] = useState(true);
 
   useEffect(() => {
     const token = localStorage.getItem("token");
     if (!token) {
       setFel("Du är inte inloggad.");
       return;
     }
 
-    fetch(`${BASE_URL}/api/my-orders`, {
-      headers: {
-        Authorization: `Bearer ${token}`,
-      },
-    })
+    fetch(`${BASE_URL}/api/my-orders`, {
+      headers: {
+        Authorization: `Bearer ${token}`,
+      },
+      credentials: "include",
+    })
       .then((res) => {
         if (!res.ok) {
           throw new Error("Kunde inte ladda beställningar.");
         }
         return res.json();
       })
       .then((data) => {
         const bearbetade = (data || []).map((order) => {
           let rader = [];
           try {
             rader = JSON.parse(order.order_json || "[]");
           } catch {
             rader = [];
           }
           return { ...order, rader };
         });
         setBestallningar(bearbetade);
         setLaddar(false);
       })
       .catch((err) => {
         setFel(err.message);
         setLaddar(false);
       });
   }, []);
 
diff --git a/frontend/src/Register.jsx b/frontend/src/Register.jsx
index e828a62b125c7e8951e48c919c80d4af25d8021d..9f304362ab3b675ecde527da7acc893adbca11a4 100644
--- a/frontend/src/Register.jsx
+++ b/frontend/src/Register.jsx
@@ -1,44 +1,45 @@
 import { useState } from "react";
 import { useNavigate } from "react-router-dom";
 
 const BASE_URL = import.meta.env.VITE_API_BASE_URL;
 
 function Register() {
   const navigate = useNavigate();
   const [namn, setNamn] = useState("");
   const [email, setEmail] = useState("");
   const [telefon, setTelefon] = useState("");
   const [losenord, setLosenord] = useState("");
 
   const registrera = async () => {
     try {
-      const res = await fetch(`${BASE_URL}/api/register`, {
-        method: "POST",
-        headers: { "Content-Type": "application/json" },
-        body: JSON.stringify({ namn, email, telefon, losenord }),
-      });
+      const res = await fetch(`${BASE_URL}/api/register`, {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        credentials: "include",
+        body: JSON.stringify({ namn, email, telefon, losenord }),
+      });
 
       if (res.ok) {
         alert("Registrering lyckades!");
         navigate("/login");
       } else {
         alert("Registrering misslyckades.");
       }
     } catch (err) {
       console.error(err);
       alert("Fel vid registrering.");
     }
   };
 
   return (
     <div style={{ padding: "2rem", maxWidth: "600px", margin: "auto", textAlign: "center" }}>
       <h1>📝 Registrera dig</h1>
       <label htmlFor="regNamn">Namn</label>
       <input
         id="regNamn"
         type="text"
         placeholder="Namn"
         value={namn}
         aria-label="Skriv ditt namn"
         onChange={(e) => setNamn(e.target.value)}
         style={{ display: "block", width: "100%", marginBottom: "1rem", fontSize: "1.1rem", padding: "0.75rem" }}
diff --git a/frontend/src/Restaurang.jsx b/frontend/src/Restaurang.jsx
index ec1b173e15011c2085b89bc74afcddaff52c0346..1c1da162995f367c3f53c3dbe2bf1cfa07fd05be 100644
--- a/frontend/src/Restaurang.jsx
+++ b/frontend/src/Restaurang.jsx
@@ -1,92 +1,94 @@
 import { useEffect, useState, useCallback } from "react";
 import { useNavigate } from "react-router-dom";
 
 const BASE_URL = import.meta.env.VITE_API_BASE_URL;
 
 function Restaurang() {
   const navigate = useNavigate();
   const [dagensOrdrar, setDagensOrdrar] = useState([]);
   const [loading, setLoading] = useState(true);
   const [fel, setFel] = useState(null);
 
   const hamtaOrdrar = useCallback(async () => {
     try {
       const token = localStorage.getItem("token");
       if (!token) {
         navigate("/login");
         return;
       }
       const payload = JSON.parse(atob(token.split(".")[1]));
       if (payload.role !== "admin") {
         navigate("/");
         return;
       }
       const res = await fetch(`${BASE_URL}/api/admin/orders/today`, {
         headers: { Authorization: `Bearer ${token}` },
+        credentials: "include",
       });
       if (res.status === 401) {
         navigate("/login");
         return;
       }
       if (!res.ok) {
         throw new Error("Kunde inte hämta dagens ordrar");
       }
       const data = await res.json();
       setDagensOrdrar(data);
       setFel(null);
     } catch (err) {
       console.error(err);
       setFel("Något gick fel vid hämtning");
     } finally {
       setLoading(false);
     }
   }, [navigate]);
 
   useEffect(() => {
     hamtaOrdrar();
     const interval = setInterval(() => {
       hamtaOrdrar();
     }, 15000);
     return () => clearInterval(interval);
   }, [hamtaOrdrar]);
 
   const markeraSomKlar = async (orderId) => {
     try {
       const token = localStorage.getItem("token");
       if (!token) {
         navigate("/login");
         return;
       }
       const payload = JSON.parse(atob(token.split(".")[1]));
       if (payload.role !== "admin") {
         navigate("/");
         return;
       }
       const res = await fetch(`${BASE_URL}/api/admin/orders/${orderId}/klart`, {
         method: "PATCH",
         headers: { Authorization: `Bearer ${token}` },
+        credentials: "include",
       });
       if (res.status === 401) {
         navigate("/login");
         return;
       }
       if (!res.ok) {
         throw new Error("Kunde inte markera order som klar");
       }
       setDagensOrdrar((prev) => prev.filter((o) => o.id !== orderId));
     } catch (err) {
       alert("❌ Kunde inte markera som klar");
       console.error(err);
     }
   };
 
   const formateraTid = (timestamp) => {
     return new Date(timestamp).toLocaleTimeString("sv-SE", {
       hour: "2-digit",
       minute: "2-digit",
     });
   };
 
   const ärMörktLäge = localStorage.getItem("tema") === "dark";
 
   return (
